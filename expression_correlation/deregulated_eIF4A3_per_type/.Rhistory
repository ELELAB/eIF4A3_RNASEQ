# we first start working on (ii). here we transform the enrichment dataframe to a dataframe in which
# each line is a single gene from the FC matrix, each column is a GO term of interest
# and the entries contain Y or N if the gene is associated with the GO term of interest
# according to the enrichment analysis
all_gos = data.frame()
for (g in 1:length(int_gos)) {
go_genes = str_split(enrichment_table[ enrichment_table["Term"] == int_gos[[g]], ]$Genes, ';')[[1]]
df_col = ifelse(rownames(fc_matrix) %in% go_genes, 'Y', 'N')
df = data.frame(df_col)
colnames(df) = c(g)
if (g ==1 ) {
all_gos = df
}
else {
all_gos = cbind(all_gos,
df)
}
}
colnames(all_gos) = int_gos
rownames(all_gos) = rownames(fc_matrix)
# here we start preparing (i) as well.
# we filter out those lines (genes) which have no associated GO term among those
# of interest from the FC matrix
any_go = apply(all_gos, 1, function(x)(any(x=='Y')))
fc_matrix = fc_matrix[any_go,]
# write gene list as tsv
fc_df = data.frame(genes=rownames(fc_matrix))
write.table(fc_df, output_gene_file, sep='\t', quote=FALSE, row.names=FALSE)
# likewise, we select in the all_gos matrix only those genes that are left in the
# FC dataframe
all_gos_any = all_gos[rownames(all_gos) %in% rownames(fc_matrix), ]
# prepare colors for the annotation
ha_col = c("Y" = 'red', "N" = 'white')
ha_cols = list(ha_col)[rep(1,length(int_gos))]
names(ha_cols) = colnames(all_gos)
# prepare the annotation
ha = rowAnnotation(df = all_gos_any,
col = ha_cols,
show_legend=F)
# color the names of the TFEB genes of a different color, specified by
# tfeb_color. Note that default is black (= don't color them)
tfeb_color = ifelse(rownames(fc_matrix) %in% tfeb_genes, tfeb_color, 'black')
# set up legend
hm_legend_parms = list(title="log(FC)",
legend_height=unit(7, "cm"),
grid_width=unit(2, "cm"))
# plot heatmap with annotation
png(output_file, width=800, height=2400)
hm = Heatmap(fc_matrix,
cluster_columns=F,
cluster_rows=F,
row_names_gp = gpar(col = tfeb_color, fontsize=12),
col=viridis(1000),
right_annotation=ha,
heatmap_legend_param=hm_legend_parms)
draw(hm)
dev.off()
}
# load list of TFEB-controlled genes
tfeb_genes = sort(unique(read.table('../tfeb_genes.tsv', header=TRUE, stringsAsFactors=FALSE)$genes))
# load data
cases_cols = c("character", "numeric", "numeric", "numeric", "numeric", "numeric", "character", "numeric", "character")
case1 = read.table('control-VS-case1.DEseq2_Method.GeneDiffExp_edit.csv', sep=';', header=T, colClasses=cases_cols)
case2 = read.table('control-VS-case2.DEseq2_Method.GeneDiffExp_edit.csv', sep=';', header=T, colClasses=cases_cols)
# identify upregulated genes
case1_up   = case1[ case1$classification == 'Up' ,]
case2_up   = case2[ case2$classification == 'Up' ,]
# plot venn diagram
myCol = brewer.pal(4, "Pastel2")
venn.diagram(list(c1=case1_up$Symbol, c2=case2_up$Symbol),
filename="venn_upregulated.tiff",
category.names=list("Case 1","Case 2"),
fontfamily = "sans",
cat.fontfamily = "sans",
lty = 'blank',
fill = myCol[1:2])
# list of genes that are upregulated in either experiments
union_genes = unique(c(case1_up$Symbol, case2_up$Symbol))
# run enrichR on such gene list
enrichr_dbs = c("GO_Biological_Process_2018", "GO_Cellular_Component_2018")
enrichr_dbs_labels = c("GO_biol_proc", "GO_cell_comp")
up_enrichment = enrichr(union_genes, enrichr_dbs)
up_enrichment
length(up_enrichment)
range(1, length(enrichr_dbs)))
range(1, length(enrichr_dbs))
for (i in range(1, length(enrichr_dbs))) {
this_enrichment = up_enrichment[[i]]
write.table(this_enrichment, sprintf("enrichment_up_%s.tsv", enrichr_dbs_labels[i]), sep='\t', row.names=FALSE, quote=FALSE)
this_enrichment = this_enrichment[ this_enrichment$P.value <= 0.05, ]
# sort by P-value
sorted_enrichment = this_enrichment[order(this_enrichment$P.value),]
# number of genes per category
gene_count = lapply(sorted_enrichment$Genes, function(x) length(strsplit(x, ';' )[[1]]))
sorted_enrichment$gene.count = gene_count
# unlist the unlistable to make it compatible with ggplot
sorted_enrichment$P.value = unlist(sorted_enrichment$P.value)
sorted_enrichment$Term = unlist(sorted_enrichment$Term)
sorted_enrichment$gene.count = unlist(sorted_enrichment$gene.count)
sorted_enrichment$Term = factor(sorted_enrichment$Term, levels=sorted_enrichment$Term)
# do the plotting of GO terms, number of genes and P-pvalues
png(sprintf("categories_%s.png", enrichr_dbs_labels[i]))
ggplot(data=sorted_enrichment, aes_string(x="P.value", y="Term", size="gene.count")) +
geom_point() +
scale_size(range=c(0, 6)) +
ylab(NULL) +
scale_x_continuous( trans = "log10",
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
dev.off()
png(sprintf("categories_first_10_%s.png", enrichr_dbs_labels[i]))
ggplot(data=sorted_enrichment[1:10,], aes_string(x="P.value", y="Term", size="gene.count")) +
geom_point() +
scale_size(range=c(0, 6)) +
ylab(NULL) +
scale_x_continuous( trans = "log10",
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
dev.off()
}
for (i in range(1, length(enrichr_dbs))) {print(i)}
up_enrichment[[1]]
write.table(this_enrichment, sprintf("enrichment_up_%s.tsv", enrichr_dbs_labels[i]), sep='\t', row.names=FALSE, quote=FALSE)
this_enrichment = this_enrichment[ this_enrichment$P.value <= 0.05, ]
# sort by P-value
sorted_enrichment = this_enrichment[order(this_enrichment$P.value),]
i=1
sprintf("categories_up_%s.png", enrichr_dbs_labels[i])
sorted_enrichment
ggplot(data=sorted_enrichment, aes_string(x="P.value", y="Term", size="gene.count")) +
geom_point() +
scale_size(range=c(0, 6)) +
ylab(NULL) +
scale_x_continuous( trans = "log10",
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
dev.off()
i=1
this_enrichment = up_enrichment[[i]]
write.table(this_enrichment, sprintf("enrichment_up_%s.tsv", enrichr_dbs_labels[i]), sep='\t', row.names=FALSE, quote=FALSE)
this_enrichment = this_enrichment[ this_enrichment$P.value <= 0.05, ]
# sort by P-value
sorted_enrichment = this_enrichment[order(this_enrichment$P.value),]
# number of genes per category
gene_count = lapply(sorted_enrichment$Genes, function(x) length(strsplit(x, ';' )[[1]]))
sorted_enrichment$gene.count = gene_count
# unlist the unlistable to make it compatible with ggplot
sorted_enrichment$P.value = unlist(sorted_enrichment$P.value)
sorted_enrichment$Term = unlist(sorted_enrichment$Term)
sorted_enrichment$gene.count = unlist(sorted_enrichment$gene.count)
sorted_enrichment$Term = factor(sorted_enrichment$Term, levels=sorted_enrichment$Term)
sorted_enrichment
png(sprintf("categories_up_%s.png", enrichr_dbs_labels[i]))
ggplot(data=sorted_enrichment, aes_string(x="P.value", y="Term", size="gene.count")) +
geom_point() +
scale_size(range=c(0, 6)) +
ylab(NULL) +
scale_x_continuous( trans = "log10",
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
dev.off()
up_enrichment = enrichr(union_genes, enrichr_dbs)
# list of genes that are upregulated in either experiments
union_genes = unique(c(case1_up$Symbol, case2_up$Symbol))
# run enrichR on such gene list
enrichr_dbs = c("GO_Biological_Process_2018", "GO_Cellular_Component_2018")
enrichr_dbs_labels = c("GO_biol_proc", "GO_cell_comp")
up_enrichment = enrichr(union_genes, enrichr_dbs)
for (i in range(1, length(enrichr_dbs))) {
this_enrichment = up_enrichment[[i]]
write.table(this_enrichment, sprintf("enrichment_up_%s.tsv", enrichr_dbs_labels[i]), sep='\t', row.names=FALSE, quote=FALSE)
this_enrichment = this_enrichment[ this_enrichment$P.value <= 0.05, ]
# sort by P-value
sorted_enrichment = this_enrichment[order(this_enrichment$P.value),]
# number of genes per category
gene_count = lapply(sorted_enrichment$Genes, function(x) length(strsplit(x, ';' )[[1]]))
sorted_enrichment$gene.count = gene_count
# unlist the unlistable to make it compatible with ggplot
sorted_enrichment$P.value = unlist(sorted_enrichment$P.value)
sorted_enrichment$Term = unlist(sorted_enrichment$Term)
sorted_enrichment$gene.count = unlist(sorted_enrichment$gene.count)
sorted_enrichment$Term = factor(sorted_enrichment$Term, levels=sorted_enrichment$Term)
# do the plotting of GO terms, number of genes and P-pvalues
png(sprintf("categories_up_%s.png", enrichr_dbs_labels[i]))
ggplot(data=sorted_enrichment, aes_string(x="P.value", y="Term", size="gene.count")) +
geom_point() +
scale_size(range=c(0, 6)) +
ylab(NULL) +
scale_x_continuous( trans = "log10",
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
dev.off()
png(sprintf("categories_up_first_10_%s.png", enrichr_dbs_labels[i]))
ggplot(data=sorted_enrichment[1:10,], aes_string(x="P.value", y="Term", size="gene.count")) +
geom_point() +
scale_size(range=c(0, 6)) +
ylab(NULL) +
scale_x_continuous( trans = "log10",
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
dev.off()
}
for (i in range(1, length(enrichr_dbs))) {
print(i)
this_enrichment = up_enrichment[[i]]
write.table(this_enrichment, sprintf("enrichment_up_%s.tsv", enrichr_dbs_labels[i]), sep='\t', row.names=FALSE, quote=FALSE)
this_enrichment = this_enrichment[ this_enrichment$P.value <= 0.05, ]
# sort by P-value
sorted_enrichment = this_enrichment[order(this_enrichment$P.value),]
# number of genes per category
gene_count = lapply(sorted_enrichment$Genes, function(x) length(strsplit(x, ';' )[[1]]))
sorted_enrichment$gene.count = gene_count
# unlist the unlistable to make it compatible with ggplot
sorted_enrichment$P.value = unlist(sorted_enrichment$P.value)
sorted_enrichment$Term = unlist(sorted_enrichment$Term)
sorted_enrichment$gene.count = unlist(sorted_enrichment$gene.count)
sorted_enrichment$Term = factor(sorted_enrichment$Term, levels=sorted_enrichment$Term)
# do the plotting of GO terms, number of genes and P-pvalues
png(sprintf("categories_up_%s.png", enrichr_dbs_labels[i]))
ggplot(data=sorted_enrichment, aes_string(x="P.value", y="Term", size="gene.count")) +
geom_point() +
scale_size(range=c(0, 6)) +
ylab(NULL) +
scale_x_continuous( trans = "log10",
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
dev.off()
png(sprintf("categories_up_first_10_%s.png", enrichr_dbs_labels[i]))
ggplot(data=sorted_enrichment[1:10,], aes_string(x="P.value", y="Term", size="gene.count")) +
geom_point() +
scale_size(range=c(0, 6)) +
ylab(NULL) +
scale_x_continuous( trans = "log10",
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
dev.off()
}
for (i in range(1, length(enrichr_dbs))) {
print(i)
this_enrichment = up_enrichment[[i]]
write.table(this_enrichment, sprintf("enrichment_up_%s.tsv", enrichr_dbs_labels[i]), sep='\t', row.names=FALSE, quote=FALSE)
this_enrichment = this_enrichment[ this_enrichment$P.value <= 0.05, ]
# sort by P-value
sorted_enrichment = this_enrichment[order(this_enrichment$P.value),]
# number of genes per category
gene_count = lapply(sorted_enrichment$Genes, function(x) length(strsplit(x, ';' )[[1]]))
sorted_enrichment$gene.count = gene_count
# unlist the unlistable to make it compatible with ggplot
sorted_enrichment$P.value = unlist(sorted_enrichment$P.value)
sorted_enrichment$Term = unlist(sorted_enrichment$Term)
sorted_enrichment$gene.count = unlist(sorted_enrichment$gene.count)
sorted_enrichment$Term = factor(sorted_enrichment$Term, levels=sorted_enrichment$Term)
print(sorted_enrichment)
# do the plotting of GO terms, number of genes and P-pvalues
png(sprintf("categories_up_%s.png", enrichr_dbs_labels[i]))
ggplot(data=sorted_enrichment, aes_string(x="P.value", y="Term", size="gene.count")) +
geom_point() +
scale_size(range=c(0, 6)) +
ylab(NULL) +
scale_x_continuous( trans = "log10",
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
dev.off()
png(sprintf("categories_up_first_10_%s.png", enrichr_dbs_labels[i]))
ggplot(data=sorted_enrichment[1:10,], aes_string(x="P.value", y="Term", size="gene.count")) +
geom_point() +
scale_size(range=c(0, 6)) +
ylab(NULL) +
scale_x_continuous( trans = "log10",
breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
dev.off()
print(i)
}
cancer_types = types_DEA[ abs(types_DEA$logFC) > logFC_co, ]$cancer.type
data_location="../../../../TCGA_data/Expression/cancer_types/"
# load cancer types and filter them for log of fold-change in cancer subtypes
# to find in which subtypes eIF4A3 is deregulated
logFC_co = 0.5
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
cancer_types = types_DEA[ abs(types_DEA$logFC) > logFC_co, ]$cancer.type
data_location="../../../../TCGA_data/Expression/cancer_types/"
# load cancer types and filter them for log of fold-change in cancer subtypes
# to find in which subtypes eIF4A3 is deregulated
logFC_co = 0.5
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
setwd("~/tmp/expression_correlation/deregulated_eIF4A3_per_type")
data_location="../../../../TCGA_data/Expression/cancer_types/"
# load cancer types and filter them for log of fold-change in cancer subtypes
# to find in which subtypes eIF4A3 is deregulated
logFC_co = 0.5
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
cancer_types = types_DEA[ abs(types_DEA$logFC) > logFC_co, ]$cancer.type
print(cancer_types)
print(dim(cancer.types))
print(dim(cancer_types))
data_location="../../../../TCGA_data/Expression/cancer_types/"
# load cancer types and filter them for log of fold-change in cancer subtypes
# to find in which subtypes eIF4A3 is deregulated
logFC_co = 0.5
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
cancer_types = types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")]
print(cancer_types)
dim(cancer_types)
data_location="../../../../TCGA_data/Expression/cancer_types/"
# load cancer types and filter them for log of fold-change in cancer subtypes
# to find in which subtypes eIF4A3 is deregulated
logFC_co = 0.5
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
cancer_types = types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type", "cancer.subtype")]
data_location="../../../../TCGA_data/Expression/cancer_types/"
# load cancer types and filter them for log of fold-change in cancer subtypes
# to find in which subtypes eIF4A3 is deregulated
logFC_co = 0.5
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
cancer_types = types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type", "logFC")]
print(cancer_types)
data_location="../../../../TCGA_data/Expression/cancer_types/"
# load cancer types and filter them for log of fold-change in cancer subtypes
# to find in which subtypes eIF4A3 is deregulated
logFC_co = 0.5
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
cancer_types = types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")]
print(cancer_types)
cancer_types = as.data.frame(types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
print(cancer_types)
# load cancer types and filter them for log of fold-change in cancer subtypes
# to find in which subtypes eIF4A3 is deregulated
logFC_co = 0.5
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
cancer_types = data.frame(types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
print(cancer_types)
cancer_types = data.frame(types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
cacncer_types
cancer_types
cancer_types = data.frame(cancer.type = types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
cancer_types
cancer_types = as.data.frame(cancer.type=types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
cancer_types = as.data.frame(cancer.type=types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
data_location="../../../../TCGA_data/Expression/cancer_types/"
# load cancer types and filter them for log of fold-change in cancer subtypes
# to find in which subtypes eIF4A3 is deregulated
logFC_co = 0.5
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
cancer_types = as.data.frame(cancer.type=types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
cancer_types = as.data.frame(cancer.type=types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
cancer_types = data.frame(cancer.type=types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
cancer_types = as.data.frame(cancer.type=types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
cancer_types = data.frame(cancer.type=types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
cancer_types
# we exclude CHOL because it has no subtypes defined
excluded_types = c("CHOL")
cancer_types$cancer_type %in% excluded_types
cancer_types = data.frame(cancer.type=types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
# we exclude some specific types
cancer_types = cancer_types[ ! cancer_types$cancer.type %in% excluded_types, ]
# we exclude CHOL because it has no subtypes defined
excluded_types = c("CHOL")
data_location="../../../../TCGA_data/Expression/cancer_types/"
# load cancer types and filter them for log of fold-change in cancer subtypes
# to find in which subtypes eIF4A3 is deregulated
logFC_co = 0.5
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
cancer_types = data.frame(cancer.type=types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
# we exclude some specific types
cancer_types = cancer_types[ ! cancer_types$cancer.type %in% excluded_types, ]
cancer_types
cancer_types$cancer.type %in% excluded_types
cancer_types = data.frame(cancer.type=types_DEA[ abs(types_DEA$logFC) > logFC_co, c("cancer.type")])
cancer_types$cancer.type %in% excluded_types
! cancer_types$cancer.type %in% excluded_types
cancer_types[ ! cancer_types$cancer.type %in% excluded_types, ]
cancer_types = data.frame(cancer.type=types_DEA[ abs(types_DEA$logFC) > logFC_co && cancer_types$cancer.type %in% excluded_types, c("cancer.type")])
cancer_types
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
cancer_types = data.frame(cancer.type=types_DEA[ abs(types_DEA$logFC) > logFC_co && cancer_types$cancer.type %in% excluded_types, c("cancer.type")])
cancer_types
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
cancer_types = data.frame(cancer.type=types_DEA[ (abs(types_DEA$logFC) > logFC_co) && (cancer_types$cancer.type %in% excluded_types), c("cancer.type")])
cancer_types
cancer_types = data.frame(cancer.type=types_DEA[ (abs(types_DEA$logFC) > logFC_co) && (! cancer_types$cancer.type %in% excluded_types), c("cancer.type")])
cancer_types
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
cancer_types = data.frame(cancer.type=types_DEA[ (abs(types_DEA$logFC) > logFC_co) && (! types_DEA$cancer.type %in% excluded_types), c("cancer.type")])
# filter out types with low |logFC| and excluded types
cancer_types = data.frame(cancer.type=types_DEA[ (abs(types_DEA$logFC) > logFC_co) && (! types_DEA$cancer.type %in% excluded_types), c("cancer.type")])
cancer-ty
cancer_types
types_DEA = read.table('../../deregulation_eIF4A3/eIF4A3_DEA_per_type.tsv',
sep='\t',
header=TRUE,
stringsAsFactors=FALSE)
# filter out types with low |logFC| and excluded types
cancer_types = data.frame(cancer.type=types_DEA[ (abs(types_DEA$logFC) > logFC_co) && (! types_DEA$cancer.type %in% excluded_types), c("cancer.type")])
cancer_types
abs(types_DEA$logFC) > logFC_co) && (! types_DEA$cancer.type %in% excluded_types)
(abs(types_DEA$logFC) > logFC_co) && (! types_DEA$cancer.type %in% excluded_types)
# filter out types with low |logFC| and excluded types
cancer_types = data.frame(cancer.type=types_DEA[ (abs(types_DEA$logFC) > logFC_co) & (! types_DEA$cancer.type %in% excluded_types), c("cancer.type")])
cancer_types
analyze_correlation("enriched", 0.05)
# run analysis
analyze_correlation("tfeb", 0.05)
analyze_correlation = function(name, alpha) {
# color scale
colf=colorRamp2(c(-1,       0,      1   ),
c("blue", "white", "red"))
corrs_fname = sprintf("correlation_%s.tsv", name)
pvals_fname = sprintf("p-values_%s.tsv", name)
name = "tfeb"
alpha=0.05
# color scale
colf=colorRamp2(c(-1,       0,      1   ),
c("blue", "white", "red"))
library(ComplexHeatmap)
library(circlize)
library(ggplot2)
library(factoextra)
# color scale
colf=colorRamp2(c(-1,       0,      1   ),
c("blue", "white", "red"))
corrs_fname = sprintf("correlation_%s.tsv", name)
pvals_fname = sprintf("p-values_%s.tsv", name)
# read data
corrs = read.table(corrs_fname, stringsAsFactors=FALSE, sep='\t', quote="")
pvals = read.table(pvals_fname, stringsAsFactors=FALSE, sep='\t', quote="")
rownames(corrs) = corrs$cancer.type
rownames(pvals) = pvals$cancer.type
orig_rownames = rownames(corrs)
orig_colnames = colnames(corrs)
print(sprintf("original matrix %s: %d, %d", name, dim(corrs)[[1]], dim(corrs[[2]])))
dim(corrs)
dim(corrs)[[1]]
print(sprintf("original matrix %s: %d, %d", name, dim(corrs)[[1]], dim(corrs[[2]])))
sprintf("original matrix %s: %d, %d", name, dim(corrs)[[1]], dim(corrs[[2]]))
corrs[[2]]
sprintf("original matrix %s: %d, %d", name, dim(corrs)[[1]], dim(corrs)[[2]])
print(sprintf("original matrix %s: %d, %d", name, dim(corrs)[[1]], dim(corrs)[[2]]]))
print(sprintf("original matrix %s: %d, %d", name, dim(corrs)[[1]], dim(corrs)[[2]]))
corrs = corrs[, colSums(! is.na(corrs)) > 4 ]
corrs = corrs[corrs$nsamples >= 10, ]
pvals = pvals[, colSums(! is.na(pvals)) > 4 ]
pvals = pvals[pvals$nsamples >= 10, ]
print("lost rows")
print(setdiff(orig_rownames, rownames(corrs)))
print("lost cols")
print(setdiff(orig_colnames, colnames(corrs)))
setdiff(orig_rownames, rownames(corrs))
orig_rownames
rownames(corrs)
orig_colnames
colnames(corrs)
corrs_m = as.matrix(corrs[,4:dim(corrs)[2]])
pvals_m = as.matrix(pvals[,4:dim(pvals)[2]])
(! is.na(corrs_m))
corrs_m[pvals_m > alpha] = NA
cols_full = colSums( (! is.na(corrs_m))/dim(corrs_m)[1] )
cols_full
rows_full = rowSums( (! is.na(corrs_m))/dim(corrs_m)[2] )
rows_full
? png
library(TCGAbiolinks)
TCGA_MolecularSubtype()
? TCGA_MolecularSubtype
library(TCGAutils)
sampleTypes
? TCGAquery_SampleTypes
? png
? rev
? scale_y_continuous
? scale_y_discrete
scale_y_reverse
? order
